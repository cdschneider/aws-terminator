# Usage: ansible-playbook setup-iam.yml -vv
#
# Creates IAM policies and associates them with two iam_groups. These groups
# can then be associated with an appropriate user:
#
# Groups:
# - ansible-integration-ci
#   - Mirrors the permissions used by the the AWS collections CI
# - ansible-integration-unsupported
#   - Additional Permissions on top of the 'CI' permissions
#     required to run the 'unsupported' tests
#
# Policies:
# - AnsibleIntegration-CI-*
#   - Managed Policies used by the {{ iam_group_prefix }}-ci group
# - AnsibleIntegration-Unsupported-*
#   - Managed Policies used by the {{ iam_group_prefix }}-unsupported group
#
# Supported variables:
# - region: (default: us-east-1) The AWS region that any region-restricted
#       policies will be limited to
# - iam_group_prefix: (default: ansible-integration) the prefix used when
#       creating IAM groups
# - iam_policy_prefix: (default: AnsibleIntegration) the prefix used when
#       creating IAM policies
# - iam_user: (default: None) An IAM user to attach to the groups
#
# Note:
# - In general you will want any test user to be a member of **both** the -ci
#   and the -unsupported groups

- hosts: localhost
  connection: local
  gather_facts: no
  vars:
    aws_region: "{{ region | default('us-east-1') }}"
    iam_group_prefix: "{{ group_prefix | default('ansible-integration') }}"
    iam_policy_prefix: "{{ policy_prefix | default('AnsibleIntegratation') }}"

  module_defaults:
    group/aws:
      profile: '{{ profile | default(omit) }}'

  # # Needed if you're running Ansible 2.10+
  # collections:
  #   - amazon.aws
  #   - community.aws

  tasks:

    - name: Get aws account ID
      aws_caller_info:
      register: aws_caller_info

    - name: Set aws_account_id fact
      set_fact:
        aws_account_id: "{{ aws_caller_info.account }}"

    - name: Ensure Managed IAM policies exist (CI)
      vars:
        _policy: "{{ (item | basename | regex_replace('\\.yaml', '') | regex_replace('\\W+', ' ')).split(' ') | map('capitalize') | join('') }}"
      iam_managed_policy:
        policy_name: "{{ iam_policy_prefix }}-CI-{{ _policy }}"
        policy: "{{ lookup('template', item) | from_yaml | to_json }}"
        state: present
      with_fileglob: "ci_policies/*.yaml"
      register: iam_managed_policies_ci

    - name: Ensure Managed IAM policies exist (unsupported)
      vars:
        _policy: "{{ (item | basename | regex_replace('\\.yaml', '') | regex_replace('\\W+', ' ')).split(' ') | map('capitalize') | join('') }}"
      iam_managed_policy:
        policy_name: "{{ iam_policy_prefix }}-Unsupported-{{ _policy }}"
        policy: "{{ lookup('template', item) | from_yaml | to_json }}"
        state: present
      with_fileglob: "test_policies/*.yaml"
      register: iam_managed_policies_unsupported

    - debug:
        msg: "{{ iam_managed_policies_ci | json_query('results[].policy.policy_name') }}"
    - debug:
        msg: "{{ iam_managed_policies_unsupported | json_query('results[].policy.policy_name') }}"

    - name: Ensure IAM CI group exists and attach managed policies
      iam_group:
        name: "{{ iam_group_prefix }}-ci"
        state: present
        managed_policy: "{{ iam_managed_policies_ci | json_query('results[].policy.policy_name') }}"
        purge_policy: yes
        users: '{{ iam_user | default(omit)}}'

    - name: Ensure IAM Unsupported group exists and attach managed policies
      iam_group:
        name: "{{ iam_group_prefix }}-unsupported"
        state: present
        managed_policy: "{{ iam_managed_policies_unsupported | json_query('results[].policy.policy_name') }}"
        purge_policy: yes
        users: '{{ iam_user | default(omit)}}'
